" install coc extensions
let g:coc_global_extensions = ['coc-json', 'coc-git', 'coc-go',  'coc-sh', 'coc-xml', 'coc-python', 'coc-cmake', 'coc-snippets', 'coc-yaml', 'coc-docker', 'coc-html']

" May need for vim (not neovim) since coc.nvim calculate byte offset by count
" utf-8 byte sequence.
set encoding=utf-8
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}


" Don t try to be vi compatible  
set nocompatible
 
" Helps force plugins to load correctly when it is turned back on below 
filetype on 
 
" Turn on syntax highlighting 
syntax on

" set the runtime path to include Vundle and initialize 
call plug#begin()

Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
 
call plug#end()            
 
" Show line numbers 
set number
 
" Show file stats 
set ruler
 
" Encoding 
set encoding=utf-8
 
" Whitespace 
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
 
" Allow hidden buffers
set hidden
 
" Status bar
set laststatus=2
 
" specials chars
set listchars+=space:.,tab:>-
"set list
 
" Last line
set showmode
set showcmd
 
" Searching
set hlsearch
set incsearch
set showmatch

" TODO: Pick a leader key
let mapleader = ","

let python_highlight_all = 1

:map <F2> :%!jq '.'<CR>
:map <F3> :%!xxd<CR>
:map <F4> :%!xxd -r<CR>
:map <F5> :set nonumber<CR>:set norelativenumber<CR>:set nolist<CR>
:map <F6> :set number<CR>:set relativenumber<CR>:set list<CR>
:map <F7> :w<CR>:!clear;python3 %<CR>
 
:nnoremap q 0
:nnoremap <space> $ 
:inoremap jj <ESC>
:cnoremap jj <ESC>
:nnoremap <space>t :!ctags -aR --language-force=Python -L `python -c 'import sys,glob;tab=[];[ tab.extend(glob.glob(p+"/*py",recursive=True)) for p in sys.path ];[print(e) for e in tab]'` .   --extra=+ivmfc<cr><cr>
set belloff=all
:cabbrev help tab help
set tags=./tags;,tags;


au FileType go nmap <leader>r <Plug>(go-run-split)
inoremap <leader><leader> <C-x><C-o>
nnoremap \\ :s/\/\///g<CR>
nnoremap // 0a//<ESC>
vnoremap \\ :s/^\/\///g<CR>
vnoremap // :s/^/\/\//g<CR>

hi CocMenuSel term=standout ctermfg=0 ctermbg=3 guifg=Blue guibg=Yellow
set backspace=indent,eol,start
set undofile
