#!/bin/bash
if (whoami != root)
then echo "Please run as root"
exit 1
fi
if [ $(grep PAT1 ~/.tmux.conf |wc -l ) -eq 0 ]; then
cat >> ~/.tmux.conf << EOF_PAT1
# PAT1

# to write on user directory as .tmux.conf
# remap prefix from 'C-b' to 'C-q'
unbind C-b
set-option -g prefix C-q
bind-key C-q send-prefix
 
bind-key Y run-shell -b "tmux show-buffer |xclip -sel prim -i;tmux show-buffer |xclip -sel clip -i"
 
# set mode-keys vi
set -g mode-keys vi
 
# https://github.com/dminca/dotfiles/tree/master/dotfiles
# vim style
###########
# vim-like pane switching
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R
 
# vim-like pane resizing
bind -r C-k resize-pane -U
bind -r C-j resize-pane -D
bind -r C-h resize-pane -L
bind -r C-l resize-pane -R
 
# unbind
unbind Up
unbind Down
unbind Left
unbind Right
 
unbind C-Up
unbind C-Down
unbind C-Left
unbind C-Right

unbind %
unbind '"'
bind % split-window -h -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"

set -g status-style bg=red,fg=white
set -g window-status-current-style bg=green

## imported start ##
# to write on user directory as .tmux.conf
# remap prefix from 'C-b' to 'C-q'
unbind C-b
set-option -g prefix C-q
bind-key C-q send-prefix
 
bind-key Y run-shell -b "tmux show-buffer |xclip -sel prim -i;tmux show-buffer |xclip -sel clip -i"
 
# set mode-keys vi
set -g mode-keys vi
 
# https://github.com/dminca/dotfiles/tree/master/dotfiles
# vim style
###########
# vim-like pane switching
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R
 
# vim-like pane resizing
bind -r C-k resize-pane -U
bind -r C-j resize-pane -D
bind -r C-h resize-pane -L
bind -r C-l resize-pane -R
 
# unbind
unbind Up
unbind Down
unbind Left
unbind Right
 
unbind C-Up
unbind C-Down
unbind C-Left
unbind C-Right

unbind %
unbind '"'
bind % split-window -h -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"

set -g status-style bg=red,fg=white
set -g window-status-current-style bg=green
## imported stop ##



set -g status-interval 60
WEATHER='#(curl -s wttr.in/\?format\=4)'
set -g status-right "$WEATHER ..."

EOF_PAT1
else
echo "Nothing to do"
fi
if [ $(grep PAT2 ~/.vimrc |wc -l ) -eq 0 ]; then
cat >> ~/.vimrc << EOF_PAT2
" PAT2

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" set the runtime path to include Vundle and initialize 
call plug#begin()

" Use release branch (recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}
"
" Or build from source code by using yarn: https://yarnpkg.com
" Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
Plug 'yaegassy/coc-ansible', {'do': 'yarn install --frozen-lockfile'}
 
call plug#end()            

let g:coc_global_extensions = ['coc-json', 'coc-git', 'coc-go',  'coc-sh', 'coc-xml', 'coc-python', 'coc-cmake', 'coc-snippets', 'coc-yaml', 'coc-docker', 'coc-html', 'coc-clangd','coc-perl' ]

" May need for vim (not neovim) since coc.nvim calculate byte offset by count
" utf-8 byte sequence.
set encoding=utf-8
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by  in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use  and  to navigate diagnostics
" Use  to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example:  for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add  command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add  command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add  command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see  for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>


" Don t try to be vi compatible 
set nocompatible
 
" Helps force plugins to load correctly when it is turned back on below 
filetype on 
 
" Turn on syntax highlighting "
syntax on
 


 
" Show line numbers "
set number
 
" Show file stats "
set ruler
 
" Encoding "
set encoding=utf-8
 
" Whitespace "
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
 
" Allow hidden buffers "
set hidden
 
" Status bar "
set laststatus=2
 
" specials chars "
set listchars+=space:.,tab:>-
"set list
 
" Last line "
set showmode
set showcmd
 
" Searching "
set hlsearch
set incsearch
set showmatch

" TODO: Pick a leader key "
let mapleader = ","

let python_highlight_all = 1

:map <F2> :%!jq '.'<CR>
:map <F3> :%!xxd<CR>
:map <F4> :%!xxd -r<CR>
:map <F5> :set nonumber<CR>:set norelativenumber<CR>:set nolist<CR>
:map <F6> :set number<CR>:set relativenumber<CR>:set list<CR>
:map <F7> :w<CR>:!clear;python3 %<CR>
 
:nnoremap q 0
:nnoremap <space> $ 
:inoremap jj <ESC>
:cnoremap jj <ESC>
:nnoremap <space>t :!ctags -aR --language-force=Python -L  .   --extra=+ivmfc<cr><cr>
set belloff=all
:cabbrev help tab help
set tags=./tags;,tags;


au FileType go nmap <leader>r <Plug>(go-run-split)
inoremap <leader><leader> <C-x><C-o>
nnoremap \ :s/\/\///g<CR>
nnoremap // 0a//<ESC>
vnoremap \ :s/^\/\///g<CR>
vnoremap // :s/^/\/\//g<CR>

hi CocMenuSel term=standout ctermfg=0 ctermbg=3 guifg=Blue guibg=Yellow
set backspace=indent,eol,start
set undofile
EOF_PAT2
else
echo "Nothing to do"
fi
if [ $(grep PAT3 ~/.bashrc |wc -l ) -eq 0 ]; then
cat >> ~/.bashrc << EOF_PAT3
# PAT3

set -o vi
bind '"jj":"\e"'

# add current branch to PS1
parse_git_output(){
  git branch 2> /dev/null |grep '*' |sed -nr 's/(.*\*\ )(.*)/\ \(\2\)/p'
}

emoji_out(){
python3 << EEOF
import datetime
tmp=datetime.datetime.now().hour
if tmp < 8:
  print('\U0001f31c')
elif tmp < 9:
  print('\U0001f6bf')
elif tmp < 10:
  print('\U0001f950')
elif tmp < 11:
  print('\u2615')
elif tmp < 12:
  print('\U0001f913')
elif tmp < 14:
  print('\U0001f969')
elif tmp < 17:
  print('\U0001f433')
elif tmp < 18:
  print('\U0001f37b')
elif tmp < 19:
  print('\U0001f95c')
elif tmp < 20:
  print('\U0001f95c')
elif tmp < 21:
  print('\U0001f95c')
elif tmp < 22:
  print('\U0001f363')
elif tmp < 23:
  print('\U0001f393')
else:
  print('\U0001f4a4')
EEOF
}
 
export PS1="\[\033[01;31m\]\u@\[\033[00m\]\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;34m\]\w \$(emoji_out) \033[01;33m\]\$(parse_git_output)\[\033[00m\]\$ "
 
alias BASHRC='source ~/.bashrc'
alias VBASHRC='vim ~/.bashrc'
alias gitC='git log --graph --format="%C(auto) %h %d %Cblue %cn (%cr) %n %Creset %s %n" --all'
alias gitL='git log --graph --oneline --decorate --all'
alias ll='ls -alth'

alias VENV="if [ -d VENV ]; then echo -e ' => '$GREEN'VENV found'; else echo -e ' => '$BLUE'NEW VENV'; python3 -m venv VENV; fi && source VENV/bin/activate"
EOF_PAT3
else
echo "Nothing to do"
fi
if [ $(grep PAT4 ~/.vim/coc-settings.json |wc -l ) -eq 0 ]; then
cat >> ~/.vim/coc-settings.json << EOF_PAT4
# PAT4

{
  "languageserver": {
    "terraform": {
      "command": "terraform-ls",
      "args": ["serve"],
      "filetypes": [
        "terraform",
        "tf"
      ],
      "initializationOptions": {},
      "settings": {}
    }
  },
  "yaml.schemas": {
    "kubernetes": "/*.yaml"},
    "go.goplsOptions": {
      "completeUnimported": true
    }
}
EOF_PAT4
else
echo "Nothing to do"
fi
if [ $(grep PAT5 ~/.profile |wc -l ) -eq 0 ]; then
cat >> ~/.profile << EOF_PAT5
# PAT5

export GOPATH=$HOME/go
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
EOF_PAT5
else
echo "Nothing to do"
fi
mkdir -p ~/.config/coc/ultisnips/
if [ $(grep PAT6 ~/.config/coc/ultisnips/yaml.snippets |wc -l ) -eq 0 ]; then
cat >> ~/.config/coc/ultisnips/yaml.snippets << EOF_PAT6
# PAT6

snippet pod "kubernetes Pod"
  apiVersion: v1
  kind: Pod
  metadata:
    name: ${1:PodName}
    namespace: ${2:Namespace}
    labels:
      ${3:LabelName}: ${4:LabelValue}
  spec:
    containers:
      - name: ${5:ContainerName}
        image:${6:ImageName}
        ports:
          - name: http
            containerPort: 80
            protocol: TCP
endsnippet
snippet service "Kubernetes Service"
  apiVersion: v1
  kind: Service
  metadata:
    name: ${1:SvcName}
    namespace: ${2:Namespace}
  spec:
    selector:
      ${3:LabelName}: ${4:LabelValue}
    ports:
      - protocol: TCP
        port: 80
        targetPort: ${5:TargetPort}
endsnippet
snippet deploy "Kubernetes Deployment"
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${1:DeploymentName}
    namespace: ${2:Namespace}
    labels:
      ${3:LabelName}: ${4:LabelValue}
  spec:
    replicas: ${5:Replicas}
    selector:
      matchLabels:
        ${6:LabelName}: ${7:LabelValue}
    template:
      metadata:
        labels:
        ${6:LabelName}: ${9:LabelValue}
      spec:
        containers:
        - name: ${10:ContainerName}
          image:${11:ContainerImage}
          ports:
          - containerPort: 80
endsnippet
snippet cronjob "Kubernetes CronJob"
  apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: ${1:CronjobName}
    namespace: ${2:Namespace}
  spec:
    schedule: "*/1 * * * *"
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: ${3:ContainerName}
              image:${4:ImageName}
            restartPolicy: OnFailure
endsnippet
snippet configmap "Kubernetes ConfigMap"
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${1:ConfigMapName}
    namespace: ${2:Namespace}
  data:
    file.name: |
      multiline contents
      for this file.name
endsnippet
snippet secret "Kubernetes Secret"
  apiVersion: v1
  kind: Secret
  metadata:
    name: ${1:SecretName}
    namespace: ${2:Namespace}
  type: Opaque
  data:
    base64.key1: ${3:Base64String1}
    base64.key2: ${4:Base64String2}
  stringData:
    my.variable: ${5:MyVariableString}
    my.file: |-
      Multiline contents for this
      secret file
endsnippet
snippet loadbalancer "Kubernetes LoadBalancer"
  apiVersion: v1
  kind: Service
  metadata:
    name: ${1:LoadBalancerName}
    namespace: ${2:Namespace}
  spec:
    selector:
      app: ${3:MyApp}
    type: LoadBalancer
    ports:
      - protocol: TCP
        port: 80
        targetPort: ${3:TargetPort}
    clusterIP: ${4:ClusterIP}
endsnippet
snippet ingress "Kubernetes Ingress"
  apiVersion: networking.k8s.io/v1beta1
  kind: Ingress
  metadata:
    name: ${1:IngressName}
    namespace: ${2:Namespace}
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
  spec:
    rules:
    - host: foo.bar.com
      http:
        paths:
        - path: /foo
          backend:
            serviceName: service1
            servicePort: 4200
        - path: /bar
          backend:
            serviceName: service2
            servicePort: 8080
endsnippet
snippet job "Kubernetes Job"
  apiVersion: batch/v1
  kind: Job
  metadata:
    name: ${1:JobName}
    namespace: ${2:Namespace}
  spec:
    template:
      spec:
        containers:
        - name: ${3:ContainerName}
          image: ${4:ImageName}
        restartPolicy: Never
    backoffLimit: 4
endsnippet

###################################
# terraform
###################################
# variable
snippet var "variable"
variable "${1:name}" {
  ${1}
}
endsnippet

snippet var_em "variable with empty brackets"
variable "${1:name}" {}
endsnippet

# providers
snippet provider
provider "${1:name}" {
  ${2:config}
}
endsnippet

snippet provider_aws
provider "aws" {
  access_key = "${var.access_key}"
  secret_key = "${var.secret_key}"
  region = "${var.region}"
}
endsnippet

snippet provider_openstack
provider "openstack" {
  user_name  = "${var.user_name}"
  tenant_name = "${var.tenant_name}"
  password  = "${var.password}"
  auth_url  = "${var.auth_url}"
}
endsnippet

snippet provider_docker
provider "docker" {
  host = "${1:${var.host}}"
}
endsnippet

snippet provider_google
provider "google" {
  account_file = "${file("account.json")}"
  project = "my-gce-project"
  region = "us-central1"
}
endsnippet

snippet provider_digitalocean
provider "digitalocean" {
  token = "${var.do_token}"
}
endsnippet

snippet provider_consul
provider "consul" {
  address = "demo.consul.io:80"
k datacenter = "nyc1"
}
endsnippet

# resource
snippet resource
resource "${1:type}" "${2:name}" {
  ${3:config}
}
endsnippet

## resource aws
snippet resource_aws_instance
resource "aws_instance" "${1:name}" {
  ami = "${2:ami-383c1956}"
  instance_type = "${3:t2.micro}"
}
endsnippet

snippet resource_route53_record "Resource for a route53 record"
resource "aws_route53_record" "$2" {
  zone_id = "$3"
  name = "$4"
  type = "$5"
  ttl = "${6:300}"
  records = $7
}
endsnippet

snippet resource_template_file "Template file resource"
resource "template_file" "$1" {
  filename = "$1"
  vars {
    $2
  }
}
endsnippet

snippet resource_aws_eip
resource "aws_eip" "${1:name}" {
  instance = "aws_instance.${2:$1}.id"
  vpc = ${3:true}
}
endsnippet

snippet resource_aws_key_pair
resource "aws_key_pair" "${1:name}" {
  key_name = "${2:$1}"
  public_key = "${3:public_key}"
}
endsnippet

snippet resource_aws_security_group
resource "aws_security_group" "${1:name}" {
  name = "${2:$1}"
  description = "${3:desc}"

  ingress {
      from_port = ${4:from_port}
      to_port = ${5:to_port}
      protocol = "${5:tcp}"
      cidr_blocks = ["${6:0.0.0.0/0}"]
  }

  egress {
      from_port = ${7:0}
      to_port = ${8:0}
      protocol = "${9:-1}"
      cidr_blocks = [${10:"0.0.0.0/0"}]
  }
}
endsnippet

snippet resource_aws_s3_bucket
resource "aws_s3_bucket" "${1:name}" {
  bucket = "${2:$1}"
  acl = "${3:private}"
}
endsnippet

snippet resource_aws_s3_bucket_static_web
resource "aws_s3_bucket" "${1:name}" {
  bucket = "${2:$1}"
  acl = "${3:private}"
  policy = "${4:${file("policy.json")}}"

  website {
      index_document = "${5:index.html}"
      error_document = "${6:error.html}"
  }
}
endsnippet

## other

snippet output
output "${1:name}" {
  value = "${2:${aws_instance.foo.public_ip}}"
}
endsnippet

snippet tags
tags {
  Name = "${2:value}"
}
endsnippet


## funcs
snippet lookup "Lookup function" w
\$\{lookup(var.$1, $2)\}
endsnippet


#types
snippet qvar "quoted variable"
"\$\{var.$1\}"
endsnippet

snippet res "resouce as a variable" w
\$\{$1.$2\}
endsnippet

snippet var "regular var" w
\$\{var.$1\}
endsnippet

snippet arr "make a array"
[ $1 ]
endsnippet

snippet =
$1 = $2
endsnippet
EOF_PAT6
else
echo "Nothing to do"
fi
if ! command -v sudo &> /dev/null; then
apt update && apt install sudo -y
fi
sudo apt update && sudo apt install git curl make clang libtool-bin python3-dev python3-pip exuberant-ctags python3-venv golang-go ranger -y
pip3 install jedi && pip3 install console_colors
if ! command -v vim &> /dev/null; then
if ! [ $(vim --version | grep -q "+python";echo $?) -eq 0 ];then
git clone https://github.com/vim/vim.git
cd vim && ./configure --enable-python3interp && cd src && make && make install
fi
fi
cat <(echo 'FORCE'='yes') <(curl -sL install-node.now.sh/lts) |bash
npm install --global yarn
